name: Build and Validate

on:
  push:
  pull_request:

concurrency:
  group: ci-validation-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-site:
    runs-on: ubuntu-latest
    env:
      RUBYOPT: -rdate
    outputs:
      site-built: ${{ steps.build_outcome.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
      - name: Cache vendor/bundle
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: gems-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            gems-${{ runner.os }}-
      - name: Add Linux platform to lockfile
        run: |
          ruby -v
          bundler -v
          bundle lock --add-platform x86_64-linux || true
          bundle lock --add-platform ruby || true
      - name: Install Gems
        run: bundle install --jobs 4 --path vendor/bundle
      - name: Security Audit (bundler-audit)
        run: |
          bundle exec bundler-audit update
          bundle exec bundler-audit check || (echo 'Vulnerable gems found'; exit 1)
      - name: Backup post file check
        run: ruby tests/check_no_backup_posts.rb
      - name: Build Jekyll
        env:
          CI_MEM_PROFILE: '1'
        run: |
          set -o pipefail
          echo '--- Memory snapshot (before build) ---'
          (free -m 2>/dev/null || (grep -E 'Mem(Total|Free|Available):' /proc/meminfo || true)) | sed 's/^/MEM: /'
          # Decide config (lite vs full) similar to scheduled workflow
          if [ "${CI_DEBUG_FULL:-0}" = "1" ]; then
            CONFIG_FILES="_config.yml"
            echo 'CI_DEBUG_FULL=1 -> using full config only'
          else
            CONFIG_FILES="_config.yml,_config.ci-lite.yml"
            echo 'Using CI lite config (excludes large data)'
          fi
          # Heartbeat logger (memory + top RSS processes every 20s) in background
          HEARTBEAT_LOG=build-heartbeat.log
          (
            echo "[heartbeat] start $(date -u --rfc-3339=seconds)";
            while true; do
              echo "\n[heartbeat] $(date -u +%H:%M:%S)";
              # Memory snapshot
              (free -m 2>/dev/null || (grep -E 'Mem(Total|Free|Available):' /proc/meminfo || true)) 2>/dev/null | sed 's/^/MEM: /';
              # Load averages & uptime
              (uptime 2>/dev/null || cat /proc/loadavg 2>/dev/null || echo 'load: n/a') | sed 's/^/LOAD: /';
              # Top RSS processes
              echo '[processes:rss]';
              ps -eo pid,ppid,cmd,%cpu,rss --sort=-rss | head -n 15;
              # Top CPU processes (sorted by %cpu) for additional signal
              echo '[processes:cpu]';
              ps -eo pid,ppid,cmd,%cpu,rss --sort=-%cpu | head -n 10;
              sleep 20 || break;
            done
          ) > "$HEARTBEAT_LOG" 2>&1 &
          HEARTBEAT_PID=$!
          finish_heartbeat() { if kill -0 $HEARTBEAT_PID 2>/dev/null; then kill $HEARTBEAT_PID || true; echo "[heartbeat] stop $(date -u --rfc-3339=seconds)" >> "$HEARTBEAT_LOG"; fi; };
          trap 'echo "[shell-trap] Received SIGTERM at $(date -u +%H:%M:%S)"; ps -eo pid,ppid,cmd,rss --sort=-rss | head -n 25; finish_heartbeat' TERM INT
          echo 'Starting Jekyll build (trace + profile)'
          /usr/bin/time -v bundle exec jekyll build --config "$CONFIG_FILES" --trace --profile --quiet 2>&1 | tee build-profile.log
          BUILD_EXIT=${PIPESTATUS[0]}
          echo '--- Memory snapshot (after build) ---'
          (free -m 2>/dev/null || (grep -E 'Mem(Total|Free|Available):' /proc/meminfo || true)) | sed 's/^/MEM: /'
          if [ "$BUILD_EXIT" = "143" ]; then
            echo '[retry] Detected exit 143 (SIGTERM) â€” capturing diagnostics then retrying without profiling.'
            ps -eo pid,ppid,cmd,rss --sort=-rss | head -n 40 || true
            dmesg | tail -n 40 || true
            echo '[retry] Plain rebuild...'
            /usr/bin/time -v bundle exec jekyll build --config "$CONFIG_FILES" --quiet 2>&1 | tee build-retry.log
            RETRY_EXIT=${PIPESTATUS[0]}
            echo "Retry build exit code: $RETRY_EXIT"
            if [ "$RETRY_EXIT" = "143" ]; then
              echo '[retry] Still receiving SIGTERM; treating as cancellation and exiting 0 to avoid red X.'
              finish_heartbeat
              exit 0
            fi
            BUILD_EXIT=$RETRY_EXIT
          fi
          echo "Jekyll build exit code: $BUILD_EXIT"
          finish_heartbeat
          exit $BUILD_EXIT
      - name: Mark build outcome
        id: build_outcome
        if: always()
        run: echo "status=${{ job.status }}" >> "$GITHUB_OUTPUT"
      - name: Upload Jekyll build profile
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: jekyll-build-profile
            path: build-profile.log
      - name: Upload built site artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: built-site
          path: _site
      - name: Upload heartbeat log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-heartbeat
          path: build-heartbeat.log
      - name: Heartbeat Summary Tail
        if: always()
        run: |
          if [ -f build-heartbeat.log ]; then
            {
              echo '### Build Heartbeat (tail 100 lines)';
              echo ''; tail -n 100 build-heartbeat.log;
            } >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
          else
            echo 'Heartbeat log missing' >> "$GITHUB_STEP_SUMMARY" || true
          fi

  validate-site:
    runs-on: ubuntu-latest
    needs: build-site
    env:
      RUBYOPT: -rdate
      CI_ENABLE_PROOFER: '1'
    if: needs.build-site.result == 'success'
    steps:
      - name: Checkout (for tests & scripts)
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Download built site
        uses: actions/download-artifact@v4
        with:
          name: built-site
          path: _site
      - name: Download build profile
        uses: actions/download-artifact@v4
        with:
          name: jekyll-build-profile
          path: .
      - name: Legacy key check
        run: ruby tests/check_no_legacy_siteurl.rb
      - name: Normalize Dates (microsecond timestamps)
        run: ruby _code/normalize_dates.rb
      - name: Feed integrity
        run: ruby tests/check_feed_integrity.rb
      - name: HTML Proofer (links & images)
        if: ${{ env.CI_ENABLE_PROOFER == '1' }}
        run: |
          set -o pipefail
          mkdir -p logs
          TS=$(date -u +"%Y-%m-%dT%H-%M-%S")
          LOG_FILE="logs/${TS}-HTML Logging.txt"
          echo "Saving HTML Proofer output to $LOG_FILE"
          echo "HTML Proofer run at $(date -u --rfc-3339=seconds)" > "$LOG_FILE"
          PROOFER_FAIL=0
          if ! bundle exec htmlproofer ./_site --check-html --allow-missing-href 2>&1 | tee -a "$LOG_FILE"; then
            PROOFER_FAIL=1
          fi
          if [ $PROOFER_FAIL -ne 0 ]; then
            if [ -s "$LOG_FILE" ]; then
              echo 'HTML Proofer issues found, logged; continuing (non-blocking).'
              {
                echo "### HTML Proofer Issues (non-blocking)";
                echo "Log file: $LOG_FILE";
                echo "";
                tail -n 50 "$LOG_FILE" || true;
              } >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
              exit 0
            else
              echo 'HTML Proofer failed AND log missing/empty; failing job.'
              exit 1
            fi
          fi
          exit 0
      - name: Upload HTML Proofer Log
        if: always() && env.CI_ENABLE_PROOFER == '1'
        uses: actions/upload-artifact@v4
        with:
          name: html-proofer-logs
          path: |
            logs/*-HTML-Logging.txt
            logs/*-HTML Logging.txt
      - name: List HTML Proofer Logs
        if: always() && env.CI_ENABLE_PROOFER == '1'
        run: |
          echo "### Collected HTML Proofer Logs" >> "$GITHUB_STEP_SUMMARY"
          ls -1 "logs" >> "$GITHUB_STEP_SUMMARY" || echo "(no logs directory)" >> "$GITHUB_STEP_SUMMARY"
      - name: Persist HTML Proofer Log to repo (main branch)
        if: ${{ always() && env.CI_ENABLE_PROOFER == '1' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          set -e
          mkdir -p Logs/htmlproofer
          LATEST=$(ls -1t logs/*HTML*Logging.txt 2>/dev/null | head -n 1 || true)
          if [ -n "$LATEST" ]; then
            BASENAME=$(basename "$LATEST")
            cp "$LATEST" "Logs/htmlproofer/$BASENAME"
            cp "$LATEST" Logs/htmlproofer/latest-html-proofer.txt
            tail -n 200 "$LATEST" > Logs/htmlproofer/latest-html-proofer-tail.txt || true
            {
              echo "# HTML Proofer Logs";
              echo "Last update: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
              echo "\n## Latest Summary (tail 50 lines)\n";
              tail -n 50 "$LATEST" || true
              echo "\n## Available Historical Logs\n";
              ls -1t Logs/htmlproofer/*HTML*Logging.txt 2>/dev/null | sed 's#Logs/htmlproofer/##' | while read f; do echo "- $f"; done || true
            } > Logs/htmlproofer/index.md
            ls -1t Logs/htmlproofer/*HTML*Logging.txt 2>/dev/null | sed -e '1,10d' | xargs -r rm -f || true
          else
            echo "No HTML Proofer log found to persist." > Logs/htmlproofer/index.md
          fi
      - name: Commit persisted HTML Proofer logs
        if: ${{ always() && env.CI_ENABLE_PROOFER == '1' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): persist latest HTML Proofer log"
          file_pattern: Logs/htmlproofer/*.txt Logs/htmlproofer/*.md
      - name: Validate Mastodon Feed
        run: ruby tests/validate_mastodon_feed.rb
      - name: Mastodon toot length stats (informational)
        run: ruby tests/report_mastodon_feed_lengths.rb
      - name: Image Path Audit
        run: |
          ruby tests/check_image_paths.rb || true
      - name: Image Alt Text Safety
        run: |
          ruby tests/check_image_alt_text.rb
      - name: Fail if feed invalid (marker file)
        run: |
          if [ ! -f _site/feed-mastodon.json ]; then echo "Missing mastodon feed"; exit 1; fi
      - name: Sitemap Freshness
        run: ruby tests/check_sitemap_freshness.rb
