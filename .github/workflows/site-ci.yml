name: CI Build & Validate

on:
  push:
  pull_request:
  # Weekly scheduled run (Monday 05:00 UTC) to refresh security audit & logs
  schedule:
    - cron: '0 5 * * 1'

jobs:
  build-validate:
    runs-on: ubuntu-latest
    env:
      RUBYOPT: -rdate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
      - name: Cache vendor/bundle
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: gems-${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            gems-${{ runner.os }}-
      - name: Add Linux platform to lockfile
        run: |
          ruby -v
          bundler -v
          bundle lock --add-platform x86_64-linux || true
          bundle lock --add-platform ruby || true
      - name: Install Gems
        run: bundle install --jobs 4 --path vendor/bundle
      - name: Security Audit (bundler-audit)
        # Always runs, scheduled run ensures weekly DB refresh; push/PR catch regressions.
        run: |
          bundle exec bundler-audit update
          bundle exec bundler-audit check || (echo 'Vulnerable gems found'; exit 1)
      - name: Backup post file check
        run: ruby tests/check_no_backup_posts.rb
      - name: Build Jekyll
        run: bundle exec jekyll build --quiet
      - name: Legacy key check
        run: ruby tests/check_no_legacy_siteurl.rb
      - name: Normalize Dates (microsecond timestamps)
        run: ruby _code/normalize_dates.rb
      - name: Feed integrity
        run: ruby tests/check_feed_integrity.rb
      - name: HTML Proofer (links & images)
        run: |
          set -o pipefail
          mkdir -p logs
          TS=$(date -u +"%Y-%m-%dT%H-%M-%S")
          LOG_FILE="logs/${TS}-HTML Logging.txt"
          echo "Saving HTML Proofer output to $LOG_FILE"
          echo "HTML Proofer run at $(date -u --rfc-3339=seconds)" > "$LOG_FILE"
          PROOFER_FAIL=0
          if ! bundle exec htmlproofer ./_site --check-html --allow-missing-href 2>&1 | tee -a "$LOG_FILE"; then
            PROOFER_FAIL=1
          fi
          if [ $PROOFER_FAIL -ne 0 ]; then
            if [ -s "$LOG_FILE" ]; then
              echo 'HTML Proofer issues found, logged; continuing (non-blocking).'
              {
                echo "### HTML Proofer Issues (non-blocking)";
                echo "Log file: $LOG_FILE";
                echo "";
                tail -n 50 "$LOG_FILE" || true;
              } >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
              exit 0
            else
              echo 'HTML Proofer failed AND log missing/empty; failing job.'
              exit 1
            fi
          fi
          exit 0
      - name: Upload HTML Proofer Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-proofer-logs
          path: |
            logs/*-HTML-Logging.txt
            logs/*-HTML Logging.txt
      - name: List HTML Proofer Logs
        if: always()
        run: |
          echo "### Collected HTML Proofer Logs" >> "$GITHUB_STEP_SUMMARY"
          ls -1 "logs" >> "$GITHUB_STEP_SUMMARY" || echo "(no logs directory)" >> "$GITHUB_STEP_SUMMARY"
      - name: Persist HTML Proofer Log to repo (main branch)
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          set -e
          mkdir -p Logs/htmlproofer
          LATEST=$(ls -1t logs/*HTML*Logging.txt 2>/dev/null | head -n 1 || true)
          if [ -n "$LATEST" ]; then
            BASENAME=$(basename "$LATEST")
            cp "$LATEST" "Logs/htmlproofer/$BASENAME"
            cp "$LATEST" Logs/htmlproofer/latest-html-proofer.txt
            tail -n 200 "$LATEST" > Logs/htmlproofer/latest-html-proofer-tail.txt || true
            {
              echo "# HTML Proofer Logs";
              echo "Last update: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
              echo "\n## Latest Summary (tail 50 lines)\n";
              tail -n 50 "$LATEST" || true
              echo "\n## Available Historical Logs\n";
              ls -1t Logs/htmlproofer/*HTML*Logging.txt 2>/dev/null | sed 's#Logs/htmlproofer/##' | while read f; do echo "- $f"; done || true
            } > Logs/htmlproofer/index.md
            ls -1t Logs/htmlproofer/*HTML*Logging.txt 2>/dev/null | sed -e '1,10d' | xargs -r rm -f || true
          else
            echo "No HTML Proofer log found to persist." > Logs/htmlproofer/index.md
          fi
      - name: Commit persisted HTML Proofer logs
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): persist latest HTML Proofer log"
          file_pattern: Logs/htmlproofer/*.txt Logs/htmlproofer/*.md
      - name: Validate Mastodon Feed
        run: ruby tests/validate_mastodon_feed.rb
      - name: Mastodon toot length stats (informational)
        run: ruby tests/report_mastodon_feed_lengths.rb
      - name: Image Path Audit
        run: |
          ruby tests/check_image_paths.rb || true
      - name: Image Alt Text Safety
        run: |
          ruby tests/check_image_alt_text.rb
      - name: Fail if feed invalid (marker file)
        run: |
          if [ ! -f _site/feed-mastodon.json ]; then echo "Missing mastodon feed"; exit 1; fi
      - name: Sitemap Freshness
        run: ruby tests/check_sitemap_freshness.rb